'#############################################################################3
REGEX
easy
. is your single char wildcard
[] is a group of one or more chars to match to a single char
follow any of this with a * to match zero or more
follow any of this with a + to match one or more
follow any of this with a ? to match zero or one time
[^] to not match these chars
^ is start of line anchor
$ is the end of line anchor
\s is a whitespace
\t is a tab
\ is an escape char for special chars
Because we want to do more than simply search for literal pieces of text, we need to reserve certain characters for special use. 
In the regex flavors discussed in this tutorial, there are 12 characters with special meanings: 
the backslash \, 
the caret ^, 
the dollar sign $, 
the period or dot ., 
the vertical bar or pipe symbol |, 
the question mark ?, 
the asterisk or star *, 
the plus sign +, 
the opening parenthesis (, 
the closing parenthesis ), 
and the opening square bracket [, 
the opening curly brace {, 
These special characters are often called "metacharacters".



'##############################################################################################
MySQL REGEXP Constructs and Special Characters
NOTE IN MYSQL THERE ARE NO \S FOR WHITESPACE, JUST USE => [[:space:]]
Escape chars must be doubled => do not use \(, you must use \\(, another eg. do not use \*, you must use \\*
Not sure what other issues there are


A MySQL regular expression may use any of the following constructs and special characters to construct a pattern for use with the REGEXP operators. The construct or special character is shown, followed by a description of each and what operations in performs within the pattern for the regular expression.

    ^ : Match the beginning of a string.
    $ : Match the end of a string.
    . : Match any character (including carriage return and newline characters).
    a* : Match any sequence of zero or more a characters.
    a+ : Match any sequence of one or more a characters.
    a? : Match either zero or one a characters.
    de|abc : Match either of the character sequences, de or abc.
    (abc)* : Match zero or more instances of the character sequence abc.
    {1},{2,3} : Provides a more general way of writing regular expressions that match many occurences of the previous atom (or “piece”) of the pattern. i.e. a? can be written as a{0,1}.
   [-_\. ].*)?$".*)?$".*)?$".*)?$" : Matches any character that is (or is not, if ^ is used) either a, b, c, d, or X. A “-” character between two other characters forms a range that maches all characters from the first character to the second.
    [.characters.] : Within a bracket expression (using “[” and “]”), matches the sequence of characters of that collating element. i.e. the pattern [[.period.]] would match the ‘.’ (period) character.
    [=character_class=] : Within a bracket expression, represents an equivalence class. It matches all characters with the same collation value, including itself.
    [:character_class:] : Within a bracket expression, represents a character class that matches all characters belonging to that class. i.e. the pattern [[:alpha:]] would match against a string that is all aphabetic characters.
    [[:<:]],[[:>:]] : These markers stand for word boundaries, and as such they match the beginning and ending of words, respectively.

* NOTE: MySQL interprets the “\” (backslash) character as an escape character. If you choose to use the “\” character as part of your pattern in a regular expression it will need to escaped with another backslash “\\”.


MySQL LIKE command
_ is for one wildcard char
% is to match for 0 or more wildcard chars

'##############################################################################################'

'############################################################################################
vb.net Like Operator
      

Used to compare two strings.

Syntax

result = string Like pattern

The Like operator syntax has these parts:

Part Description 
result Required; any numeric variable. 
string Required; any string expression.  
pattern Required; any string expression conforming to the pattern-matching conventions described in Remarks. 



Remarks

If string matches pattern, result is True; if there is no match, result is False. If either string or pattern is Null, result is Null.

The behavior of the Like operator depends on the Option Compare statement. The default string-comparison method for each module is Option Compare Binary.

Option Compare Binary results in string comparisons based on a sort order derived from the internal binary representations of the characters. Sort order is determined by the code page. In the following example, a typical binary sort order is shown:

A < B < E < Z < a < b < e < z < À < Ê < Ø < à < ê < ø

Option Compare Text results in string comparisons based on a case-insensitive, textual sort order determined by your system's locale. When you sort The same characters using Option Compare Text, the following text sort order is produced:

(A=a) < (À=à) < (B=b) < (E=e) < (Ê=ê) < (Z=z) < (Ø=ø)

Built-in pattern matching provides a versatile tool for string comparisons. The pattern-matching features allow you to use wildcard characters, character lists, or character ranges, in any combination, to match strings. The following table shows the characters allowed in pattern and what they match:

Characters in pattern Matches in string 
? Any single character. 
* Zero or more characters. 
# Any single digit (0–9). 
[charlist] Any single character in charlist. 
[!charlist] Any single character not in charlist. 



A group of one or more characters (charlist) enclosed in brackets ([ ]) can be used to match any single character in string and can include almost any character code, including digits.

Note   To match the special characters left bracket ([), question mark (?), number sign (#), and asterisk (*), enclose them in brackets. The right bracket (]) can't be used within a group to match itself, but it can be used outside a group as an individual character.

By using a hyphen (–) to separate the upper and lower bounds of the range, charlist can specify a range of characters. For example, "([-_\. ].*)?$".*)?$".*)?$" results in a match if the corresponding character position in string contains any uppercase letters in the range A–Z. Multiple ranges are included within the brackets without delimiters.

The meaning of a specified range depends on the character ordering valid at run time (as determined by Option Compare and the locale setting of the system the code is running on). Using the Option Compare Binary example, the range [A–E] matches A, B and E. With Option Compare Text, [A–E] matches A, a, À, à, B, b, E, e. The range does not match Ê or ê because accented characters fall after unaccented characters in the sort order.

Other important rules for pattern matching include the following: 

An exclamation point (!) at the beginning of charlist means that a match is made if any character except the characters in charlist is found in string. When used outside brackets, the exclamation point matches itself.


A hyphen (–) can appear either at the beginning (after an exclamation point if one is used) or at the end of charlist to match itself. In any other location, the hyphen is used to identify a range of characters.


When a range of characters is specified, they must appear in ascending sort order (from lowest to highest). " is not.


The character sequence [] is considered a zero-length string (""). 
In some languages, there are special characters in the alphabet that represent two separate characters. For example, several languages use the character "æ" to represent the characters "a" and "e" when they appear together. The Like operator recognizes that the single special character and the two individual characters are equivalent.

When a language that uses a special character is specified in the system locale settings, an occurrence of the single special character in either pattern or string matches the equivalent 2-character sequence in the other string. Similarly, a single special character in pattern enclosed in brackets (by itself, in a list, or in a range) matches the equivalent 2-character sequence in string.
'##############################################################################################################################################################'



'##############################################################################################################################################################'
'##############################################################################################################################################################'
'##############################################################################################################################################################'
'##############################################################################################################################################################'
'##############################################################################################################################################################'
LINQ VS DATATABLE SELECT => USE LINQ
linq is sooooo   unbelievable powerful, it can do almost anythign and it can do it fast and it scales very well.

'simple
'   Dim qrows = From row In dt.AsEnumerable() Where row.Item("email").ToString = msg.From.Address Select a
'   For each row in qrows
'       do some shit
'   next

'more complex and better
'   Dim qrows = From row In dt.AsEnumerable()
'               Let a = row.Item("email").ToString
'               Where a = msg.From.Address
'               Select a
'   For each row in qrows
'       do some shit
'   next

'bad bad bad
'   Dim qrows() As System.Data.DataRow = dt.Select("email='" & msg.From.Address & "'")
'   for each row as system.data.datarow in qrows
'       do some shit
'   next

'but linq can do soooo many more complex things, this is but a simple example
'   Dim qrows = From row In dt.AsEnumerable()
'               Let a = local.base_path & local.cr & "\" & row.Item("cr_id").ToString & "\" & row.Item("cr_id").ToString & ".xlsb"
'               Where FileIO.FileSystem.FileExists(a)
'               Select a
'   Dim cr_attach() As String = qrows.ToArray








































-----------------------------------
IMAP email download options
-----------------------------------
            'this downloads the desired info on the messages in the targeted mailbox to the messages collection
            'see the IMAP protocol for filters, you put them inside quotes with no commas
            'Show only unread email => "UNSEEN"
            'Show only read email => "SEEN"
            'show only recent mail, maybe today, im not sure => "RECENT"
            'show only email with subject matching a criteria => "SUBJECT ""CR: *"""
            'show only undeleted email => "UNDELETED"
            'show all "ALL"
            rx_svr_imap.Folders.Inbox.Messages.Download("ALL")

			            Dim query = From msg In rx_svr_imap.Folders.Inbox.Messages
                        Select msg
            '                                        Where msg.Subject.StartsWith("CR: ") And msg.Attachments.Count > 0
            '                                       Select msg








CR form compression for param changes
--------------------------------------------
note for CR form and cr storage, I want to have a way to tell if the user has over X rows of the same parameter change, I do not want to put all these row by row into the CR DB.  I just want to put in 1 representative row,
need to have a way to id these types (type => param, node => cell/relation, repeat => more than x times per CR, value => same), then only write the sumamry row for all these changes, with the node list somewhere, maybe the comments section (a col wiht a text type as it can handle large fields.
this will make it easier to store space-wise in the DB and also easier to read from the approvers POV.  The CR creation still will use one row per node format though, it is the app that will id and compress these rows.


Error Management
---------------------
end mar15 => best to just use the get out error structure and cancel the operation if we get any error.  Then use the check email timer to wait and try again later....  If something was half processed, we should roll back those changes.


The app communicates with 4 entities.  Failure in anyone of these is critical, so the code needs to stop and wait and try again indefintiely until the issue is resolved.
1) humans, just reject the request and ask the human to fix it and explain why it was rejected => easy
2) email servers => go into indefinite stop, wait, retry loop until comms are restored.
3) DB server => go into indefinite stop, send error report, wait, retry loop until comms are restored (need to understand why all errors happen, only big one should be comms to SQL DB are down, but there may be others)
4) HDD on app machine => go into indefinite stop, send error report, wait, retry loop until comms are restored (need to understand why all errors happen, only big one should be HDD space, but there may be others)

Need to have some very stable and solid handling routines to deal with these errors that do not corrupt the processing flow of the tool.
For all other errors, need to have handling logic that doesn't halt the process flow, but doesn't corrupt data, case by case.

New CR processing
----------------------
get email
check attachments, needs at least 1 .xlsb file
dl all
Syntax checker => check all .xlsb files for syntax => need at least one good one to continue.  For each .xlsb, if it has attachments, then they must exist for it to be good.
Reject all bad crs
for good .xlsb.....
import data into dataset
Compressor => check each good .xlsb for compression opps, if any compress
-----------------
select all non-phy change rows with the same MO-Param-Current_Value-Proposed_Value.  If any have compression, add the others to the compression, if none have compression, use a threshold (say 10) before we create a compression row and remove them
-----------------
Add in the CR_ID, CR_sub_ID, dates and other things
Add the Dataset to Mysql DB
Modify the original .xlsb (fill out the header, delete all data rows and put in the new data, delete all compression lists and put in the new compression lists)
saveas CR_ID.xlsb
done.




















--------------------------------------------------
Functional Design
---------------------
Install requirements:
XL
something like nitro pdf creator
mysql server

------------------------
Create a help doc which can be mailed on a help request

Define several timers
=> email check timer
=> vip data update timer
=> daily CR status check timer
=> other timers?

Define several processes
=> email handler (check, DL and Process email)
	=> email process logic
		=> respond to Help request
		=> respond to admin requests (sql commands, disk commands, PC health commands, edit lists, edit run options)
		=> respond to new CR
		=> respond to CR approval
		=> respond to CR execution done
		=> respond to unscheduled data update/query (like audit reports/photo upload, query DB, query site binders, query CR data)
=> daily CR status check handler (every day, checks for open CRs and goes through each one to determine if any action is required, like reminders, escalation etc)
=> daily PC health check (every day, checks the disk space on the server, and other things, reports to admin if required)
=> DB handler (connect to DB, query DB, update/insert DB, transparent SQL command sender)
=> CR processes
	=> open CR (create CR number, check/reject CR, send CR to DB, create CR document, send CR to approver)
	=> check CR (check CR for required data)
	=> reject CR (send CR reject to originator with reasons)
	=> CR approval (update DB, store approved CR doc, send CR to executor, call reject sub if not approved with reasons => state = stalled-not approved)
	=> CR execution (update DB, store executed CR doc, store execution proof data, send CR done doc/notification to originator/others, call reject sub if not executed with reasons => state = stalled-execution issue)















---------------------------------------------------------------------------
   'this runs the sql command on the DB, the reader optionn is good for running trough a coupleof returned results, but it is better to dump to a file or the notepad or to a gridview
    '------------------------------------------------------------------------------------------------------------
    Public Sub Button_mysql_run_sqlquery_Click(sender As Object, e As EventArgs) Handles Button_mysql_run_sqlquery.Click
        Dim cmd As MySqlCommand
        Dim reader As MySqlDataReader = Nothing
        Dim sql As String
        Dim i, j, k As Integer
        Dim err As String = Nothing
        Dim full_filename As String = Nothing
        Dim filename As String = Nothing
        Dim path As String = Nothing

        If Not check_mysql_connection() Then
            MsgBox("DB is not connected")
            Exit Sub
        End If

        sql = TextBox_mysql_sqlquery.Text
        Try
            cmd = New MySqlCommand(sql, mysqlcon)

            'this puts the queried data into a gridview object
            '--------------------------------------------------
            Dim da As New MySqlDataAdapter(sql, mysqlcon)
            Dim dt As New System.Data.DataTable

            da.Fill(dt)
            DataGridView_mysql.Columns.Clear()
            DataGridView_mysql.DataSource = dt

            'this does the data export to XL
            '--------------------------------
            If CheckBox_sql2xl.Checked Then
                Try
                    i = 1
try_xl_again:
                    full_filename = g_mysql_output_destination & "\sqlexport_" & i & ".xlsx"
                    If Not dataset2xl(full_filename, dt, "sqlexport", err) Then
                        If err = "Chosen File is already open, choose another filename" Then
                            i = i + 1
                            If i < 100 Then
                                GoTo try_xl_again
                            Else
                                MsgBox("Can not find an xl filename that works, giving up...")
                            End If
                        Else
                            MsgBox(err)
                        End If
                    End If
                Catch ex As Exception

                End Try
            End If

            'this does the data export to csv
            '--------------------------------
            If CheckBox_sql2csv.Checked Then
                Try
                    full_filename = g_mysql_output_destination & "\sqlexport.csv"
                    If Is_File_Open(full_filename) Then
                        MsgBox("Can't write to selected file as it is already open, close it and try again, exiting...")
                        Throw New ArgumentException("Exception Occured")
                    End If

                    Dim export_result As Boolean = False
                    Form_dt2file.StartThread(dt, full_filename, ",")
                    'If Not export_result Then
                    'MsgBox("Some other kind of export error, exiting...")
                    'Throw New ArgumentException("Exception Occured")
                    'End If
                Catch ex As Exception
                End Try
            End If

            'this does the data export to XML
            '--------------------------------
            If CheckBox_sql2xml.Checked Then
                Try
                    i = 1
try_xml_again:
                    full_filename = g_mysql_output_destination & "\sqlexport_" & i & ".xml"
                    If Not dataset2xml(full_filename, dt, err) Then
                        If err = "Chosen File is already open, choose another filename" Then
                            i = i + 1
                            If i < 100 Then
                                GoTo try_xml_again
                            Else
                                MsgBox("Can not find an .xml filename that works, giving up...")
                            End If
                        Else
                            MsgBox(err)
                        End If
                    End If
                Catch ex As Exception

                End Try
            End If

            dt.Dispose()
            da.Dispose()
            cmd.Dispose()

            'other things
            'this will return only the first row of data
            '------------------------------------------------
            '            MsgBox(cmd.ExecuteScalar())

            'this will return everything, but is messy to get it out
            '-----------------------------------------------------
            '           reader = cmd.ExecuteReader()
            '          While reader.Read()
            'MsgBox(reader.Item(0) & "  -  " & reader.Item(1))
            '            End While
            '           reader.Close()
        Catch ex As Exception
            MsgBox("Error" & ex.ToString)
        End Try

    End Sub




    Public Sub Button_mysql_setoutput_Click(sender As Object, e As EventArgs) Handles Button_mysql_setoutput.Click
        g_mysql_output_destination = Path.GetDirectoryName(get_savefilename_from_user("", "Choose the output destination"))
        If g_mysql_output_destination = "" Or g_mysql_output_destination = "False" Then
            g_mysql_output_destination = g_default_path
            Label_mysql_output_ind.Text = "Default Location"
        Else
            Label_mysql_output_ind.Text = "Set by User"
        End If
    End Sub






google drive code
---------------------------
https://developers.google.com/drive/web/quickstart/quickstart-cs


  Imports System.Threading
    Imports System.Threading.Tasks

    Imports Google
    Imports Google.Apis.Auth.OAuth2
    Imports Google.Apis.Drive.v2
    Imports Google.Apis.Drive.v2.Data
    Imports Google.Apis.Services

    Imports Google.Apis.Auth
    Imports Google.Apis.Download

     'Dev Console:
     'https://console.developers.google.com/

     'Nuget command:
     'Install-Package Google.Apis.Drive.v2

    Private Service As DriveService = New DriveService

    Private Sub CreateService()
    If Not BeGreen Then
        Dim ClientId = "your client ID"
        Dim ClientSecret = "your client secret"
        Dim MyUserCredential As UserCredential = GoogleWebAuthorizationBroker.AuthorizeAsync(New ClientSecrets() With {.ClientId = ClientId, .ClientSecret = ClientSecret}, {DriveService.Scope.Drive}, "user", CancellationToken.None).Result
        Service = New DriveService(New BaseClientService.Initializer() With {.HttpClientInitializer = MyUserCredential, .ApplicationName = "Google Drive VB Dot Net"})
    End If
    End Sub


    Private Sub UploadFile(FilePath As String)
    Me.Cursor = Cursors.WaitCursor
    If Service.ApplicationName <> "Google Drive VB Dot Net" Then CreateService()

    Dim TheFile As New File()
    TheFile.Title = "My document"
    TheFile.Description = "A test document"
    TheFile.MimeType = "text/plain"

    Dim ByteArray As Byte() = System.IO.File.ReadAllBytes(FilePath)
    Dim Stream As New System.IO.MemoryStream(ByteArray)

    Dim UploadRequest As FilesResource.InsertMediaUpload = Service.Files.Insert(TheFile, Stream, TheFile.MimeType)

    Me.Cursor = Cursors.Default
    MsgBox("Upload Finished")
End Sub

    Private Sub DownloadFile(url As String, DownloadDir As String)
    Me.Cursor = Cursors.WaitCursor
    If Service.ApplicationName <> "Google Drive VB Dot Net" Then CreateService()

    Dim Downloader = New MediaDownloader(Service)
    Downloader.ChunkSize = 256 * 1024 '256 KB

    ' figure out the right file type base on UploadFileName extension
    Dim Filename = DownloadDir & "NewDoc.txt"
    Using FileStream = New System.IO.FileStream(Filename, System.IO.FileMode.Create, System.IO.FileAccess.Write)
        Dim Progress = Downloader.DownloadAsync(url, FileStream)
        Threading.Thread.Sleep(1000)
        Do While Progress.Status = TaskStatus.Running
        Loop
        If Progress.Status = TaskStatus.RanToCompletion Then
            MsgBox("Downloaded!")
        Else
            MsgBox("Not Downloaded :(")
        End If
    End Using
    Me.Cursor = Cursors.Default
End Sub





If you don't know the URL to download the file, then you can use this code to get one:

    Dim Request = Service.Files.List()
    Request.Q = "mimeType != 'application/vnd.google-apps.folder' and trashed = false"
    Request.MaxResults = 2
    Dim Results = Request.Execute
    For Each Result In Results.Items
        MsgBox(Result.DownloadUrl & vbCrLf & Result.Title & vbCrLf & Result.OriginalFilename)
    Next





another one
-------------------
Public Class Form1
    Dim DocServices As DocumentsService

Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    logIn()
End Sub

Sub logIn()
    DocServices = New DocumentsService("DocListUploader")
    DocServices.setUserCredentials(txtUserName.Text, txtPassword.Text)

    Dim docQuery As New DocumentsListQuery
    docQuery.NumberToRetrieve = 1
    DocServices.Query(docQuery)
    getDocList()
End Sub



Sub getDocList()
    Me.lbDocs.Items.Clear()
    Dim resultFeed As DocumentsFeed = Me.theFeed()
    Dim entry As New DocumentEntry
    For Each entry In resultFeed.Entries
        Me.lbDocs.Items.Add(entry.Title.Text)
    Next
End Sub

Function theFeed() As DocumentsFeed
    Dim query As New DocumentsListQuery()
    Dim feed As DocumentsFeed = DocServices.Query(query)
    Return feed
End Function

Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
    If OpenFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
        Dim theFilename As String = OpenFileDialog1.FileName
        Dim theEntry As DocumentEntry
        theEntry = DocServices.UploadDocument(theFilename, Nothing)
    End If
End Sub
End Class




























test

Module module_google_test

    Public GD_Service As DriveService = New DriveService

    Public Sub GD_CreateService(ByVal username As String, ByVal password As String, ByRef err As String)
        Try
            Dim MyUserCredential As UserCredential = GoogleWebAuthorizationBroker.AuthorizeAsync(New ClientSecrets() With {.ClientId = username, .ClientSecret = password}, {DriveService.Scope.Drive}, "user", CancellationToken.None).Result
            GD_Service = New DriveService(New BaseClientService.Initializer() With {.HttpClientInitializer = MyUserCredential, .ApplicationName = "Google Drive VB Dot Net"})
        Catch ex As Exception
            err = "ER: Error connecting to google drive, details: " & ex.ToString
        Finally
            GC.Collect()
        End Try
    End Sub


    Public Sub GD_Upload(ByVal FilePath As String, ByRef err As String)
        Try
            Debug.WriteLine("Google Drive Upload Start")

            If GD_Service.ApplicationName <> "Google Drive VB Dot Net" Then GD_CreateService("radio.network.engineering@gmail.com", "rionaP4142", err)

            Dim TheFile As New Google.Apis.Drive.v2.Data.File()
            TheFile.Title = "My document"
            TheFile.Description = "A test document"
            TheFile.MimeType = "text/plain"

            Dim ByteArray As Byte() = System.IO.File.ReadAllBytes(FilePath)
            Dim Stream As New System.IO.MemoryStream(ByteArray)

            Dim UploadRequest As FilesResource.InsertMediaUpload = GD_Service.Files.Insert(TheFile, Stream, TheFile.MimeType)

            Debug.WriteLine("Google Drive Upload Finished")
        Catch ex As Exception
            err = "ER: Error uploading to google drive, details: " & ex.ToString
        Finally
            GC.Collect()
        End Try
    End Sub

    Public Sub GD_Download(ByVal url As String, ByVal DownloadDir As String, ByRef err As String)
        Try
            Debug.WriteLine("Google Drive Download Start")
            If GD_Service.ApplicationName <> "Google Drive VB Dot Net" Then GD_CreateService("radio.network.engineering@gmail.com", "rionaP4142", err)

            Dim Downloader = New MediaDownloader(GD_Service)
            Downloader.ChunkSize = 256 * 1024     'KB

            ' figure out the right file type
            Dim Filename = DownloadDir & "NewDoc.txt"
            Using FileStream = New System.IO.FileStream(Filename, System.IO.FileMode.Create, System.IO.FileAccess.Write)
                Dim Progress = Downloader.DownloadAsync(url, FileStream)
                Threading.Thread.Sleep(1000)
                Do While Progress.Status = TaskStatus.Running
                Loop
                If Progress.Status = TaskStatus.RanToCompletion Then
                    Debug.WriteLine("Google Drive Download Finished")
                Else
                    Debug.WriteLine("Google Drive Download Timed Out....")
                End If
            End Using
        Catch ex As Exception
            err = "ER: Error downloading from google drive, details: " & ex.ToString
        Finally
            GC.Collect()
        End Try
    End Sub





    Public Function GD_find_url() As Google.Apis.Drive.v2.Data.FileList
        Try
            'If you don't know the URL to download the file, then you can use this code to get one:
            Dim Request = GD_Service.Files.List()
            Request.Q = "mimeType != 'application/vnd.google-apps.folder' and trashed = false"
            Request.MaxResults = 2
            Dim Results = Request.Execute
            Return Results
        Catch ex As Exception
            Return Nothing
        Finally
            GC.Collect()
        End Try
    End Function




End Module
